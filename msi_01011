//规律信号发生器：01011011101111....
module top_module ();
	reg clk;
	reg rst_n;
	wire out;	
initial `probe_start;   // Start the timing diagram

	`probe(clk);        // Probe signal "clk"
`define CLK_PERIORD		10		//时钟周期设置为10ns（100MHz）	
    
initial begin
	clk <= 0;
	rst_n <= 0;
	#20;
	rst_n <= 1;
    #1000 $finish;
end
	
	//时钟产生
always #(`CLK_PERIORD/2) clk = ~clk;	
    
msi_01011		uut_msi_01011(
				.clk(clk),
				.rst_n(rst_n),
				.out(out)
    );	
    
endmodule


module msi_01011(
	input clk,
	input rst_n,
	
	output reg out
    );
	
	reg [1:0] ns, cs;
	parameter [1:0] IDLE = 2'b00, S1 = 2'b01, CHECK = 2'b10;
	reg [2:0] cnt;
	reg [2:0] cnt_x;

	//用状态机和计数器来实现
	//首先是第一个always模块
always @(posedge clk or negedge rst_n)	begin
	if(!rst_n) cs <= 1'b0;
	else cs <= ns;
end

//第二个always模块
always @ (*) begin
	if(!rst_n) ns = 0;
	else begin
		case(cs)
			IDLE: ns = S1;
			S1: ns = CHECK;
			CHECK: begin
				if (cnt == cnt_x) ns = S1;
				else ns = CHECK;
			end
		endcase
	end	
end

//cnt计数器
always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) cnt <= 0;
	else begin
		case(ns)
			IDLE: cnt <= 0;
			S1: cnt <= 0;
			CHECK: begin 
				if (cnt == cnt_x) cnt <= 0;
				else cnt <= cnt + 1;				
			end
		endcase	
	end
end

//cnt_x计数器
always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) cnt_x <= 0;
	else if (ns == S1) cnt_x <= cnt_x + 1;
	else cnt_x <= cnt_x;
end

//输出
always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) out <= 0;
	else begin
		case(ns)
			IDLE: out <= 0;
			S1: out <= 0;
			CHECK: begin
				if (cnt == cnt_x) out <= 0;
				else out <= 1;				
			end
		endcase
	end
end
    `probe(clk);	// Sub-modules can also have `probe()
    `probe(rst_n);
    `probe(out);	// Sub-modules can also have `probe()
    
endmodule
