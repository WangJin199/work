module sync_fifo
#(
  parameter ASIZE = 4,
  parameter DSIZE = 8
)
(
  input clk,
  input rst_n,
  input winc,
  input rinc,
  input [DSIZE-1:0] wdata,
  output [DSIZE-1:0] rdata,
  output wfull,
  output rempty
);

//fifomem
localparam DEPTH = 1 << ASIZE;
reg [DSIZE-1:0] mem [DEPTH-1:0];
reg [ASIZE-1:0] waddr, raddr;
integer i;

always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) begin
		for(i=0; i < DEPTH; i = i + 1)
			mem[i] <= 8'b0;
	end
	else if (winc && !wfull) mem[waddr] <= wdata;
	else mem[waddr] <= mem[waddr];
end

//always @ (*) begin
//	if (rinc && !rempty) rdata = mem[raddr];
//	else rdata = rdata;
//end
assign rdata = mem[raddr];

//waddr
wire [ASIZE-1:0] waddr_next;
assign waddr_next = waddr + (winc & ~wfull_val);

always @ (posedge clk or negedge rst_n) begin
  if (!rst_n) waddr <= 0;
  else waddr <= waddr_next;
end

//raddr
wire [ASIZE-1:0] raddr_next;
assign raddr_next = raddr + (rinc & ~rempty_val);

always @ (posedge clk or negedge rst_n) begin
  if (!rst_n) raddr <= 0;
  else raddr <= raddr_next;
end

//fifo_cnt
reg [ASIZE:0] fifo_cnt;

always @ (posedge clk or negedge rst_n) begin
  if (!rst_n) fifo_cnt <= 0;
  else if (winc && !rinc && !wfull_val) fifo_cnt <= fifo_cnt + 1;
  else if (!winc && rinc && !rempty_val) fifo_cnt <= fifo_cnt - 1;
  //else if (wfull_val && rinc && !winc) fifo_cnt <= 1;
  //else if (rempty_val && winc && !rinc) fifo_cnt <= 1;
  else fifo_cnt <= fifo_cnt;
end

//rempty
wire rempty_val;
assign rempty_val = (fifo_cnt == 0);
assign rempty = rempty_val;
/*always @ (posedge clk or negedge rst_n) begin
  if (!rst_n) rempty <= 0;
  else rempty <= rempty_val;
end*/

//wfull
wire wfull_val;
assign wfull_val = (fifo_cnt == DEPTH);
assign wfull = wfull_val;
/*always @ (posedge clk or negedge rst_n) begin
  if (!rst_n) wfull <= 0;
  else wfull <= wfull_val;
end*/

endmodule
